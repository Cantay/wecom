<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <record id="view_wecom_apps_form" model="ir.ui.view">
            <field name="name">wecom.apps.tsearchree</field>
            <field name="model">wecom.apps</field>
            <field name="inherit_id" ref="wecom_base.view_wecom_apps_form"/>
            <field name="arch" type="xml">
                <xpath expr="//field[@name='square_logo_url']" position="before">
                    <div name="button_box" class="oe_button_box">
                        <button class="oe_stat_button" name="get_app_info" string="Get application" type="object" icon="fa-cloud-download" attrs="{'invisible': ['|','|',('agentid','=',0),('type','=','manage'),('type','=','base'),]}"/>
                        <!-- <button class="oe_stat_button" name="set_app_info" string="Set application" type="object" icon="fa-cloud-upload" attrs="{'invisible': ['|','|',('agentid','=',0),('type','=','manage'),('type','=','base'),]}"/> -->
                        <button class="oe_stat_button" name="get_access_token" string="Get Access Token" type="object" icon="fa-key" attrs="{'invisible': [('company_id','=', False)]}"/>
                    </div>
                </xpath>

                <xpath expr="//page[@name='option']" position="after">
                    <page name="access_token" string="Access Token">
                        <p class="text-info">
                            Getting access_token is the first step in calling the enterprise WeChat API interface, which is equivalent to creating a login credential, and other business API interfaces all need to rely on access_token to authentice the caller's identity.
                        </p>
                        <p class="text-info">
                            Therefore, developers should identify the source of the issuance of access_token and use the correct access_token before using the business interface.
                        </p>
                        <p class="text-info">
                            Each app has a separate access_token can only be used by this app, so the access_token for each app should be obtained separately
                        </p>
                        <p class="text-warning">
                            Developers need to cache access_token for subsequent interface calls (note: gettoken interfaces cannot be called frequently or are frequently blocked). When access_token expires or expires, it needs to be re-acquired.
                        </p>
                        <group>
                            <field name="access_token" widget="CopyClipboardText" force_save="1"/>
                            <field name="expiration_time" force_save="1"/>
                        </group>
                    </page>
                    <page name="callback" string="Callback service settings">
                        <group>
                            <p class="text-info">
                                When integrating enterprise wechat and internal systems, we often need to build a callback service. Callback service, which can realize:
                            </p>
                            <ol class="text-info">
                                <li>
                                    <b>Customize rich service behavior.</b> For example, when users send messages to applications, they identify message keywords and reply to different message contents; When the user clicks the application menu, it will be converted into instructions to execute automation tasks.
                                </li>
                                <li>
                                    <b>Status changes can be obtained in time. </b> For example, when the address book changes, you do not need to pull the address book regularly for comparison, but get the changed address book nodes in real time for synchronization.
                                </li>
                            </ol>
                        </group>
                        <group>
                            <p class="text-info">
                            Setting method
                            </p>
                            <ol class="text-info">
                                <li class="text-danger">
                                    <b>Controller:</b> Make sure the "Callback Service Name" exists in your controller code.
                                </li>
                                <li>
                                    <b>Callback URL:</b> Copy the automatically generated callback URL to the URL in the "event receiving server" of the enterprise wechat application.
                                </li>
                                <li>
                                    <b>Callback URL Token:</b> Copy the randomly generated "Token" in the "event receiving server" of the enterprise wechat application to the "callback URL token" input box of the current page.
                                </li>
                                <li>
                                    <b>Callback AES Key:</b> Copy the randomly generated "EncodingAESKey" in the "event receiving server" of the enterprise wechat application to the "callback AES key" input box on the current page.
                                </li>
                                <li class="text-danger">
                                    <b>Change:</b> When the value of "receiving event server" of the current page and enterprise wechat application changes, please ensure that the values at both ends are consistent.
                                </li>
                            </ol>
                        </group>
                        <group>
                            <field name="callback_service" required="1"/>
                            <field name="callback_url" required="1" force_save="1" widget="CopyClipboardChar"/>
                            <field name="callback_url_token" required="1" widget="wecom_password"/>
                            <field name="callback_aeskey" required="1" widget="wecom_password"/>
                        </group>
                    </page>
                </xpath>
            </field>
        </record>

    </data>
</odoo>